#define true                     1
#define false                    0

// Player ==================================
static grav = 10.0;
          
// tiles
struct { x; y; w; h; } tile_t;
// Rect, rather an aabb
struct { x; y; w; h; } rect_t;
// the player
struct { 
   x; 
   y;
   mapx;
   mapy;
   rect_t aabb; 
   xvel; 
   yvel; 
   w; 
   h; 
   grounded; } player_t;
   
static p_debugcol[3] = { 255,255,255 };

static jump_vel = 450.0;  
static p_movesp = 200.0;   
static y_floor;

// Change this value to manipulate how many tiles
// take up the screen width and height
#define MAX_SCREEN_TILES_ACROSS 12

#define WORLD_LENGTH_TILES      24
#define WORLD_HEIGHT_TILES      24

struct { x; y; } vec2d_t;

static stime, otime, dtime;
static player_t p;

static screenx, screeny, minispx, minispy, 
       scale, screenxres, screenyres, tilesizx, tilesizy;
       
// Use this to determine the top-left corner that the viewport
// begins drawing at...
static vec2d_t currtile, parallax;

static NUM_BLOCKS;
static tile_t blocks[WORLD_HEIGHT_TILES*WORLD_LENGTH_TILES];

// 24x24 map; This will be used to test horizontal and vertical scrolling...
static world[WORLD_HEIGHT_TILES][WORLD_LENGTH_TILES] = {
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};

() { // The 'main' entry point for the program...

   glenable( GL_ALPHA_TEST );

   if ( numframes == 0 ) {
      screenxres = xres; screenyres = yres;
      screenx = 0; screeny = 0;
      currtile.x = 0; currtile.y = 0;
      parallax.x = 0; parallax.y = 0;
      tilesizx = screenxres/MAX_SCREEN_TILES_ACROSS;
      tilesizy = screenyres/MAX_SCREEN_TILES_ACROSS;

      // init the player
      p.x =  128;
      p.y = 128;
      p.mapx = floor( p.x/tilesizx );
      p.mapy = floor( p.y/tilesizy );
      p.xvel = 0;
      p.yvel = 0;
      p.w = tilesizx;            
      p.h = tilesizy*2;
      p.grounded = false;
      // init player aabb
      p.aabb.x = p.x;
      p.aabb.y = p.y;
      p.aabb.w = p.w/2;
      p.aabb.h = p.h;
      
      // initialize the blocks array
      init_blocks();
      
   }

   while ( true ) {
      //cls( 0 );
      otime = stime;
      stime = klock();
      drawworld_opt();
      //drawminimap( 8, 20, 20 );
      drawminimap_opt( 8, 20, 20 );
      //drawplayer();

      drawplayer( p.x, p.y, p.w, p.h );
      p_move( p, dtime );
      p_update( p, dtime );
      draw_debugplayer( p );

      scroll( dtime*256 );
      dtime = stime - otime;
      refresh();
   }

}

// Initialize the array of blocks
init_blocks() {
   i = 0;
   for ( y=0; y<WORLD_HEIGHT_TILES; y++ ) {
      for ( x=0; x<WORLD_LENGTH_TILES; x++ ) {
         if ( WORLD[y][x] == 1 ) {
            // put it into blocks
            tile_t b;
            b.x = screenx+(x*tilesizx)+tilesizx/2;
            b.y = screeny+(y*tilesizy)+tilesizy/2;
            b.w = tilesizx;
            b.h = tilesizy;
            blocks[i] = b;
            i++;
         }
      }
   }
   NUM_BLOCKS = i;
}

scroll ( movspd ) {
   //moveto( xres - 100, 25 );
   //printf( "movspd: %g", movspd );
   if ( keystatus[0xcb] ) { // Left arrow-key
      if ( screenx < 0 ) {
         screenx += movspd;
         parallax.x += movspd/scale;
         currtile.x -= movspd/tilesizx;
         minispx -= movspd/scale;
      }
   } 
   if ( keystatus[0xcd] ) { // Right arrow-key
      if ( screenx > screenxres - tilesizx*WORLD_LENGTH_TILES ) {
         screenx -= movspd;
         parallax.x -= movspd/scale;
         currtile.x += movspd/tilesizx;
         minispx += movspd/scale;
      }
   } 
   if ( keystatus[0xc8] ) {
      if ( screeny < 0 ) {
         screeny += movspd;
         parallax.y += movspd/scale;
         currtile.y -= movspd/tilesizy;
         minispy -= movspd/scale;
      }
   } 
   if ( keystatus[0xd0] ) {
      if ( screeny > screenyres - tilesizy*WORLD_HEIGHT_TILES ) {
         screeny -= movspd;
         parallax.y -= movspd/scale;
         currtile.y += movspd/tilesizy;
         minispy += movspd/scale;
      }
   }
}

drawplayer () {
   glsettex( "DukeFace_NoBackground.png" );
   drawspr( screenxres/2, screenyres/2, 32, 32, 0 );
}

drawworld () {
   glsettex( "wood.png" );
   // GL drawing origin starts in middle of sprite
   spx = screenx + tilesizx/2; spy = screeny + tilesizy/2;
   for ( y = 0; y < WORLD_HEIGHT_TILES; y++ ) {
      for ( x = 0; x < WORLD_LENGTH_TILES; x++ ) {
         if ( world[y][x] == 0 ) {
            glsettex( "wood.png" );
         } else if ( world[y][x] == 1 ) {
            glsettex( "brick.png" );
         }
         drawspr( spx, spy, tilesizx/2, tilesizy/2, 0 );
         spx += tilesizx;
      }
      spx = screenx + tilesizx/2;
      spy += tilesizy;
   }
}

drawworld_opt () {
   /* Keep track of the top-left tile in the viewport with tx & ty */
   tx = int(currtile.x); ty = int(currtile.y);
   
   /* Foreground layer drawing origins: */
   spx = screenx + max( 0, tx-1 )*tilesizx + tilesizx/2; 
   spy = screeny + max( 0, ty-1 )*tilesizy + tilesizy/2;
   
   /* Parallax layer drawing origins: */
   parax = screenx + parallax.x + max( 0, tx-1 )*tilesizx + tilesizx/2;
   paray = screeny + parallax.y + max( 0, ty-1 )*tilesizy + tilesizy/2;
   
   /* Parallax drawing code goes here... */
   glsettex( "wood.png" );
#if 0
   /*
    * Note about parallax for-loops:
    * There still needs to be a formula that dynamically sizes the
    * parallax layer so that when the viewport reaches the edge of
    * the foreground layer, the parallax layer does not visibly run
    * out.
    *
    */
   for ( y = max( 0, ty-1 ); y < WORLD_HEIGHT_TILES+1 &&
            y < ( ty+MAX_SCREEN_TILES_ACROSS+3 ); y++ ) {
      for ( x = max( 0, tx-1 ); x < WORLD_LENGTH_TILES+1 &&
               x < ( tx+MAX_SCREEN_TILES_ACROSS+3 ); x++ ) {
         
           drawspr( parax, paray, tilesizx/2, tilesizy/2, 0 );
         parax += tilesizx;
      }
      parax = screenx + parallax.x + max( 0, tx-1 )*tilesizx + tilesizx/2;
      paray += tilesizy;
   }
#elif 1
   u = parallax.x*-50/xres;
   v = parallax.y*-50/yres;
   glbegin(GL_QUADS); gldisable(GL_DEPTH_TEST);
   gltexcoord(u,v); glvertex(0,0);
   gltexcoord(u+MAX_SCREEN_TILES_ACROSS,v); glvertex(xres,0);
   gltexcoord(u+MAX_SCREEN_TILES_ACROSS,v+MAX_SCREEN_TILES_ACROSS); glvertex(xres,yres);
   gltexcoord(u,v+MAX_SCREEN_TILES_ACROSS); glvertex(0,yres);
#endif
   
#if 0
   /* Foreground drawing code goes here... */
   for ( y = max( 0, ty-1 ); y < WORLD_HEIGHT_TILES &&
            y < ( ty+MAX_SCREEN_TILES_ACROSS+1 ); y++ ) {
      for ( x = max( 0, tx-1 ); x < WORLD_LENGTH_TILES &&
               x < ( tx+MAX_SCREEN_TILES_ACROSS+1 ); x++ ) {
         if ( world[y][x] == 0 ) {
            glsettex( "wood.png" );
            //drawspr( parax, paray, tilesizx/2, tilesizy/2, 0 );
            drawspr( spx, spy, tilesizx/2, tilesizy/2, 0 );
         } else if ( world[y][x] == 1 ) {
            glsettex( "brick.png" );
            drawspr( spx, spy, tilesizx/2, tilesizy/2, 0 );
         }
         spx += tilesizx;
      }
      spx = screenx + max( 0, tx-1 )*tilesizx + tilesizx/2;
      spy += tilesizy;
   }
#else
   x0 = max(floor(currtile.x),0); x1 = min(ceil(currtile.x+MAX_SCREEN_TILES_ACROSS),WORLD_HEIGHT_TILES);
   y0 = max(floor(currtile.y),0); y1 = min(ceil(currtile.y+MAX_SCREEN_TILES_ACROSS),WORLD_HEIGHT_TILES);
   for(y=y0;y<y1;y++)
      for(x=x0;x<x1;x++)
      {
         spx = screenx + tilesizx/2 + tilesizx*x;
         spy = screeny + tilesizy/2 + tilesizy*y;
              if (world[y][x] == 0) { continue; glsettex("wood.png"); }
         else if (world[y][x] == 1) { glsettex("brick.png"); }
         drawspr(spx,spy,tilesizx/2,tilesizy/2,0);
      }
#endif   
}

/* drawdebugmap() still needs to be refactored to implement
   the optimized drawing algorithm... */
drawdebugmap () {
   // Rect drawing starts from what would be the top left corner of the rect
   spx = screenx + tilesizx/2;
   spy = screeny + tilesizy/2;
   for ( y = 0; y < WORLD_HEIGHT_TILES; y++ ) {
      for ( x = 0; x < WORLD_LENGTH_TILES; x++ ) {
         if ( world[y][x] == 1 ) {
            draw_rect( spx, spy, tilesizx, tilesizy );
         }
         spx += tilesizx;   
      }
      // reset the x pos
      spx = screenx + tilesizx/2;
      spy += tilesizy;
   }
}

drawminimap ( miniscale, xpad, ypad ) {
   if ( numframes == 0 ) {
      scale = miniscale;
   }
   newtilesizx = tilesizx/scale;
   newtilesizy = tilesizy/scale;
   
   tx = int(currtile.x); ty = int(currtile.y);
   
   //moveto( xres - 100, 50 );
   //printf( "tx: %g", tx );
   //moveto( xres - 100, 75 );
   //printf( "ty: %g", ty );

   // Rect drawing starts from what would be the top left corner of the rect
   spx = xres - xpad - WORLD_LENGTH_TILES*newtilesizx + newtilesizx/2;
   spy = yres - ypad - WORLD_HEIGHT_TILES*newtilesizy + newtilesizy/2;
   for ( y = 0; y < WORLD_HEIGHT_TILES; y++ ) {
      for ( x = 0; x < WORLD_LENGTH_TILES; x++ ) {
         if ( world[y][x] == 1 ) {
            draw_rect( spx, spy, newtilesizx, newtilesizy );
         }
         spx += newtilesizx;   
      }
      // reset the x pos
      spx = xres - xpad - WORLD_LENGTH_TILES*newtilesizx + newtilesizx/2;
      spy += newtilesizy;
   }
   if ( numframes == 0 ) {
      minispx = xres - xpad - WORLD_LENGTH_TILES*newtilesizx + 
                 MAX_SCREEN_TILES_ACROSS*newtilesizx/2;
      minispy = yres - ypad - WORLD_HEIGHT_TILES*newtilesizy + 
                 MAX_SCREEN_TILES_ACROSS*newtilesizy/2;
   }
   draw_rect( 
      minispx, 
      minispy, 
      MAX_SCREEN_TILES_ACROSS*newtilesizx, 
      MAX_SCREEN_TILES_ACROSS*newtilesizy 
   );
}

/* drawminimap_opt() essentially shows how the optimized 
   drawing algorithm works in real time... */
drawminimap_opt ( miniscale, xpad, ypad ) {
   if ( numframes == 0 ) scale = miniscale;
   newtilesizx = tilesizx/scale;
   newtilesizy = tilesizy/scale;
   
   tx = int(currtile.x); ty = int(currtile.y);
   
   moveto( xres - 100, 50 );
   printf( "tx: %g", tx );
   moveto( xres - 100, 75 );
   printf( "ty: %g", ty );
   
   spx = xres - xpad - ( WORLD_LENGTH_TILES - tx )*newtilesizx + newtilesizx/2;
   spy = yres - ypad - ( WORLD_HEIGHT_TILES - ty )*newtilesizy + newtilesizy/2;
   
   x0 = max(floor(currtile.x),0); x1 = min(ceil(currtile.x+MAX_SCREEN_TILES_ACROSS),WORLD_HEIGHT_TILES);
   y0 = max(floor(currtile.y),0); y1 = min(ceil(currtile.y+MAX_SCREEN_TILES_ACROSS),WORLD_HEIGHT_TILES);
   for(y=y0;y<y1;y++) {
      for(x=x0;x<x1;x++)
      {
         //spx = screenx + tilesizx/2 + tilesizx*x;
         //spy = screeny + tilesizy/2 + tilesizy*y;
         if (world[y][x] == 1) { draw_rect(spx,spy,newtilesizx,newtilesizy); }
         spx += newtilesizx;
      }
      spx = xres - xpad - ( WORLD_LENGTH_TILES - tx )*newtilesizx + newtilesizx/2;
      spy += newtilesizy;
   }
   
#if 0
   for ( y = max( 0, ty-1 ); y < WORLD_HEIGHT_TILES && 
         y < ( ty+MAX_SCREEN_TILES_ACROSS+1 ); y++ ) {
      for ( x = max( 0, tx-1 ); x < WORLD_LENGTH_TILES && 
         x < ( tx+MAX_SCREEN_TILES_ACROSS+1 ); x++ ) {
         if ( world[y][x] == 1 ) {
            draw_rect( spx, spy, newtilesizx, newtilesizy );
         }
         spx += newtilesizx;
      }
      // Reset the xpos
      spx = xres - xpad - ( WORLD_LENGTH_TILES - max( 0, tx-1 ) )*newtilesizx + newtilesizx/2;
      spy += newtilesizy;
   }
#endif
   
   if ( numframes == 0 ) {
      minispx = xres - xpad - ( WORLD_LENGTH_TILES - tx )*newtilesizx + 
                 MAX_SCREEN_TILES_ACROSS*newtilesizx/2;
      minispy = yres - ypad - ( WORLD_HEIGHT_TILES - ty )*newtilesizy + 
                 MAX_SCREEN_TILES_ACROSS*newtilesizy/2;
   }
   
   // Draw the viewport rectangle
   draw_rect( 
      minispx, 
      minispy, 
      MAX_SCREEN_TILES_ACROSS*newtilesizx, 
      MAX_SCREEN_TILES_ACROSS*newtilesizy 
   );
}

// Player =======================================
drawplayer ( x, y, w, h ) {
   glsettex( "images/alucardIdle1.png" );
   drawspr( x, y, w/2, h/2, 0 );
}

draw_debugplayer ( player_t p ) {
   // Draw a simple rect to be the player for now
   setcol( p_debugcol[0], p_debugcol[1], p_debugcol[3] );
   draw_rect( p.x, p.y, p.aabb.w, p.aabb.h );
   // draw the center of the player too.
   moveto( p.x-1, p.y );
   lineto( p.x+1, p.y );
   setcol( 255,255,255 );          
   
   // let's draw some debug nums
   moveto( p.x, p.y-(p.h/2)-10 );
   printf( "x: %.0f, y: %.0f", p.x, p.y );
   moveto( p.x, p.y-(p.h/2)-20 );
   printf( "mapx: %.0f, mapy: %.0f", p.mapx, p.mapy );
   moveto( p.x, p.y-(p.h/2)-30 );
   printf( "xvel: %.0f, %.0f", p.xvel, p.yvel ); 
   moveto( p.x, p.y-(p.h/2)-40 );
}

// update the player velocity and such
p_update(player_t p, dt) {    
   
   // apply gravity
   //p_apply_grav( p, dt );
   if ( p.grounded == false ) {
      p.yvel = p.yvel + grav;
   }
   // apply movement
   p_move( p, dt );
   
   // check for collisions against the world
   aabb_collision( p, dt );
   
   p.aabb.x += p.xvel * dt;
   p.aabb.y += p.yvel * dt;
      
   p.x = p.aabb.x;
   p.y = p.aabb.y;   
   
   p.mapx = floor( p.x/tilesizx );
   p.mapy = floor( p.y/tilesizy );
}

p_move( player_t p, dt ) {
   // Player movement
   if (keystatus[0xcb] == 1) {
      p.xvel = -1 * p_movesp;
   }
     
   if (keystatus[0xcd] == 1) {
      p.xvel = p_movesp;
   }
   
   if (keystatus[0xcb] == 0
      && keystatus[0xcd] == 0) {
      p.xvel = 0;
   }                    
            
   if (keystatus[0x39] == 1) { 
      //p_jump(p, dt);
      p.yvel = -1 * jump_vel;   
   } 
   
   if (keystatus[0xd0] == 1) {
      //p.y += 10;
   } 
}

// Player movement funcitons
p_jump( player_t p, dt ) {
   p.yvel = -1 * jump_vel;
}

p_apply_grav( player_t p, dt ) {
   p.yvel = p.yvel + grav;
} 
// ==============================================

// Collision ====================================
// more efficient collsion

#if 1
aabb_collision ( player_t p, dt ) {
   // grab some player info
   rect_t a = p.aabb;
   dx = p.xvel*dt; dy = p.yvel*dt;
   pw = a.w; ph = a.h;
      
   // use the blocks array to check for collisions
   for ( i=0; i<NUM_BLOCKS; i++ ) {
      tile_t b = blocks[i];
      if ( a.x+pw/2 > b.x-b.w/2 && a.x-pw/2 < b.x+b.w/2 ) {
         // check for and resolve y cols
         // collision with top side of player
         if ( a.y-ph/2 > b.y+b.h/2 && a.y-ph/2 + dy < b.y+b.h/2 ) {
            // move the player flush against the bottom of b
            // not quite flush...
            a.y = (b.y + b.h/2) + ph/2;
            p.yvel = 0;  
         }
         // collision with bottom side of player
         if ( a.y+ph/2 < b.y-b.h/2 && a.y+ph/2 + dy > b.y-b.h/2 ) {
            // move the player flush against the top of b
            a.y = b.y - b.h/2 - ph/2;
            p.yvel = 0;
         }
      }
      if ( a.y+ph/2 > b.y-b.h/2 && a.y-ph/2 < b.y+b.h/2 ) {
         // check for and resolve x cols
         // collsion with left side of player
         if ( a.x-pw/2 > b.x+b.w/2 && a.x-pw/2 + dx < b.x+b.w/2 ) {
            // set the player flush against the right side of b
            a.x = b.x + b.w/2 + pw/2;
            p.xvel = 0;
         }
         // collision with the right side of the player
         if ( a.x+pw/2 < b.x-b.w/2 && a.x+pw/2 + dx > b.x-b.w/2 ) {
            // set the player flush against the left side of b
            a.x = b.x - b.w/2 - pw/2;
            p.xvel = 0;
         }
      }  
   }
}

#else
aabb_collision ( player_t p, dt ) {

   // the current tile of the map
   rect_t b;
   b.w = tilesizx;
   b.h = tilesizy;
   
   // new positions and velocity
   //x; y; xvel; yvel; xdir; ydir;
   
   grounded = false;
   
   // We naively iterate over each tile in the world
   // if it's solid then we create a struct for it 
   // and then we check to see if the player is colliding with it
   for ( y=0; y<WORLD_HEIGHT_TILES; y++ ) {
      for ( x=0; x<WORLD_LENGTH_TILES; x++ ) {
         b.x = screenx+(x*tilesizx)+tilesizx/2;
         b.y = screeny+(y*tilesizy)+tilesizy/2;
         
         if ( world[y][x] == 1 ) {
         
            if ( aabb_col_simple(p.aabb, b) ) {
               setcol( 255,0,0 ); 
               moveto( p.x, p.y );
               lineto( b.x, b.y );
               setcol( 255,255,255 );
            }            
    
            if (p.x+p.aabb.w/2 > b.x-b.w/2 && p.x-p.aabb.w/2 < b.x+b.w/2) {
               // top col, may need to project with yvel here
               if (p.y-p.aabb.h/2 > b.y+b.h/2 
                  && p.y-p.aabb.h/2 + p.yvel*dt < b.y + b.h/2) {
                  // move the player down out of the block
                  // only affect the y
                  p.y = b.y + b.h/2 + p.aabb.h/2;
                  p.yvel = 0;
               }
               // bottom col
               if (p.y+p.aabb.h/2 < b.y-b.h/2
                  && p.y+p.aabb.h/2 + p.yvel*dt > b.y-b.h/2) {
                  p.y = b.y - b.h/2 - p.aabb.h/2;
                  p.yvel = 0;
                  //p.grounded = true;
               }
            }
            if (p.y+p.aabb.h/2 > b.y-b.h/2 && p.y-p.aabb.h/2 < b.y+b.h/2) {
               // on the left?
               // Something isn't right, here. 
               if (p.x+p.aabb.w/2 < b.x-b.w/2 
                  && p.x+p.aabb.w/2 + p.xvel*dt > b.x-b.w/2
                  || (p.xvel > 1 && p.x+p.aabb.w/2 == b.x-b.w/2)) {
                  // move out to right
                  p.x = b.x + b.w/2 + p.aabb.w/2;
                  p.xvel = 0;
                  
               }
               // Something is also wrong here. 
               // not sure what though.
               if (p.x-p.w/2 > b.x+b.w/2
                  && p.x-p.w/2 + p.xvel*dt < b.x+b.w/2
                  || (p.xvel < 0 && p.x-p.aabb.w/2 == b.x+b.w/2)) {
                  // move out to left
                  p.x = b.x - b.w/2 - p.aabb.w/2;
                  p.xvel = 0;
               }
            }
         }   
      }
   }
}
#endif

// Simple aabb collision
aabb_col_simple( rect_t a, rect_t b ) {

   return ((a.x-a.w/2 < b.x+b.w/2 && a.x+a.w/2 > b.x-b.w/2) &&
           (a.y-a.h/2 < b.y+b.h/2 && a.y+a.h/2 > b.y-b.h/2))

}
// ==============================================

// modify this to treat x,y as the center
draw_rect( x, y, w, h ) {
   // calc the corner points from the
   // center.
   hw = w/2;
   hh = h/2;
   
   vec2d_t p1;
   vec2d_t p2;
   vec2d_t p3;
   vec2d_t p4;
   
   p1.x = x - hw;
   p1.y = y - hh;
   p2.x = x + hw;
   p2.y = y - hh;
   p3.x = x + hw;
   p3.y = y + hh;
   p4.x = x - hw;
   p4.y = y + hh;
   
   moveto(p1.x, p1.y);
   lineto(p2.x, p2.y);
   lineto(p3.x, p3.y);
   lineto(p4.x, p4.y);
   lineto(p1.x, p1.y);
}