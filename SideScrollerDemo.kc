#define true                     1
#define false                    0

// Change this value to manipulate how many tiles
// take up the screen width and height
#define MAX_SCREEN_TILES_ACROSS 12

#define WORLD_LENGTH_TILES      24
#define WORLD_HEIGHT_TILES      24

struct { x; y; } vec2d_t;

static stime, otime, dtime;

static screenx, screeny, minispx, minispy, 
       scale, screenxres, screenyres, tilesizx, tilesizy;
       
// Use this to determine the top-left corner that the viewport
// begins drawing at...
static vec2d_t currtile;

// 24x24 map; This will be used to test horizontal and vertical scrolling...
static world[WORLD_HEIGHT_TILES][WORLD_LENGTH_TILES] = {
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
   1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};

() { // The 'main' entry point for the program...

   glenable( GL_ALPHA_TEST );

   if ( numframes == 0 ) {
      screenxres = xres; screenyres = yres;
      screenx = 0; screeny = 0;
      currtile.x = 0; currtile.y = 0;
      tilesizx = screenxres/MAX_SCREEN_TILES_ACROSS;
      tilesizy = screenyres/MAX_SCREEN_TILES_ACROSS;
   }

   while ( true ) {
      cls( 0 );
      otime = stime;
      stime = klock();
      drawworld();
      //drawminimap( 8, 20, 20 );
      drawminimap_opt( 8, 20, 20 );
      //drawplayer();
      scroll( dtime*256 );
      dtime = stime - otime;
      refresh();
   }

}

scroll ( movspd ) {
   if ( keystatus[0xcb] ) { // Left arrow-key
      if ( screenx < 0 ) {
         screenx += movspd;
         currtile.x += movspd;
         minispx -= movspd/scale;
      }
   } 
   if ( keystatus[0xcd] ) { // Right arrow-key
      if ( screenx > screenxres - tilesizx*WORLD_LENGTH_TILES ) {
         screenx -= movspd;
         currtile.x -= movspd;
         minispx += movspd/scale;
      }
   } 
   if ( keystatus[0xc8] ) {
      if ( screeny < 0 ) {
         screeny += movspd;
         currtile.y += movspd;
         minispy -= movspd/scale;
      }
   } 
   if ( keystatus[0xd0] ) {
      if ( screeny > screenyres - tilesizy*WORLD_HEIGHT_TILES ) {
         screeny -= movspd;
         currtile.y -= movspd;
         minispy += movspd/scale;
      }
   }
}

drawplayer () {
   glsettex( "DukeFace_NoBackground.png" );
   drawspr( screenxres/2, screenyres/2, 32, 32, 0 );
}

drawworld () {
   glsettex( "wood.png" );
   // GL drawing origin starts in middle of sprite
   spx = screenx + tilesizx/2; spy = screeny + tilesizy/2;
   for ( y = 0; y < WORLD_HEIGHT_TILES; y++ ) {
      for ( x = 0; x < WORLD_LENGTH_TILES; x++ ) {
         if ( world[y][x] == 0 ) {
            glsettex( "wood.png" );
         } else if ( world[y][x] = 1 ) {
            glsettex( "brick.png" );
         }
         drawspr( spx, spy, tilesizx/2, tilesizy/2, 0 );
         spx += tilesizx;
      }
      spx = screenx + tilesizx/2;
      spy += tilesizy;
   }
}

drawdebugmap () {
   // Rect drawing starts from what would be the top left corner of the rect
   spx = screenx + tilesizx/2;
   spy = screeny + tilesizy/2;
   for ( y = 0; y < WORLD_HEIGHT_TILES; y++ ) {
      for ( x = 0; x < WORLD_LENGTH_TILES; x++ ) {
         if ( world[y][x] == 1 ) {
            draw_rect( spx, spy, tilesizx, tilesizy );
         }
         spx += tilesizx;   
      }
      // reset the x pos
      spx = screenx + tilesizx/2;
      spy += tilesizy;
   }
}

drawminimap ( miniscale, xpad, ypad ) {
   if ( numframes == 0 ) {
      scale = miniscale;
   }
   newtilesizx = tilesizx/scale;
   newtilesizy = tilesizy/scale;
   // Rect drawing starts from what would be the top left corner of the rect
   spx = xres - xpad - WORLD_LENGTH_TILES*newtilesizx + newtilesizx/2;
   spy = yres - ypad - WORLD_HEIGHT_TILES*newtilesizy + newtilesizy/2;
   for ( y = 0; y < WORLD_HEIGHT_TILES; y++ ) {
      for ( x = 0; x < WORLD_LENGTH_TILES; x++ ) {
         if ( world[y][x] == 1 ) {
            draw_rect( spx, spy, newtilesizx, newtilesizy );
         }
         spx += newtilesizx;   
      }
      // reset the x pos
      spx = xres - xpad - WORLD_LENGTH_TILES*newtilesizx + newtilesizx/2;
      spy += newtilesizy;
   }
   if ( numframes == 0 ) {
      minispx = xres - xpad - WORLD_LENGTH_TILES*newtilesizx + 
                 MAX_SCREEN_TILES_ACROSS*newtilesizx/2;
      minispy = yres - ypad - WORLD_HEIGHT_TILES*newtilesizy + 
                 MAX_SCREEN_TILES_ACROSS*newtilesizy/2;
   }
   draw_rect( 
      minispx, 
      minispy, 
      MAX_SCREEN_TILES_ACROSS*newtilesizx, 
      MAX_SCREEN_TILES_ACROSS*newtilesizy 
   );
}

drawminimap_opt ( miniscale, xpad, ypad ) {
   if ( numframes == 0 ) scale = miniscale;
   newtilesizx = tilesizx/scale;
   newtilesizy = tilesizy/scale;
   
   tx = int(currtile.x); ty = int(currtile.y);
   
   spx = xres - xpad - ( WORLD_LENGTH_TILES - tx )*newtilesizx + newtilesizx/2;
   spy = yres - ypad - ( WORLD_HEIGHT_TILES - ty )*newtilesizy + newtilesizy/2;
   
   for ( y = ty - 1; y < WORLD_HEIGHT_TILES; y++ ) {
      for ( x = tx - 1; ; x++ ) {
         if ( world[y][x] == 1 ) {
            draw_rect( spx, spy, newtilesizx, newtilesizy );
         }
         spx += newtilesizx;
      }
      // Reset the xpos
      spx = xres - xpad - ( WORLD_LENGTH_TILES - tx )*newtilesizx + newtilesizx/2;
      spy += newtilesizy;
   }
}

// modify this to treat x,y as the center
draw_rect( x, y, w, h ) {
   // calc the corner points from the
   // center.
   hw = w/2;
   hh = h/2;
   
   vec2d_t p1;
   vec2d_t p2;
   vec2d_t p3;
   vec2d_t p4;
   
   p1.x = x - hw;
   p1.y = y - hh;
   p2.x = x + hw;
   p2.y = y - hh;
   p3.x = x + hw;
   p3.y = y + hh;
   p4.x = x - hw;
   p4.y = y + hh;
   
   moveto(p1.x, p1.y);
   lineto(p2.x, p2.y);
   lineto(p3.x, p3.y);
   lineto(p4.x, p4.y);
   lineto(p1.x, p1.y);
}